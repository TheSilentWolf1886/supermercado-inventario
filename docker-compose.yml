services:
  db:
    image: postgres:17
    container_name: supermercado_db
    restart: always
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: supermercado_db
    ports:
      - "5434:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./postgres-init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d supermercado_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s # Give postgres a bit of startup time before first check

  keycloak:
    image: quay.io/keycloak/keycloak:26.2.0
    container_name: supermercado_keycloak
    restart: always
    environment:
      # Updated admin credentials
      KC_BOOTSTRAP_ADMIN_USERNAME: admin
      KC_BOOTSTRAP_ADMIN_PASSWORD: admin
      # KC_HTTP_ENABLED: "true" # This is default, can be omitted
      KC_HOSTNAME: localhost # For URLs generated by Keycloak
      KC_DB: postgres
      KC_DB_URL_HOST: db
      KC_DB_URL_PORT: 5432
      KC_DB_DATABASE: keycloak
      KC_DB_USERNAME: admin
      KC_DB_PASSWORD: admin
      KC_DB_SCHEMA: public
      KC_HTTP_ENABLED: "true"
      KC_FEATURES: scripts,impersonation
      #KC_LOG_LEVEL: DEBUG
      #KC_LOG_CONSOLE_OUTPUT: json
    ports:
      - "8080:8080"
    volumes:
      # Ensure 'realm-export.json' is directly in './keycloak-realm-config/'
      - ./keycloak-realm-config:/opt/keycloak/data/import/
    depends_on:
      db:
        condition: service_healthy
    # command: start # 'start' is the default command, but explicitly adding it is fine.
                    # Using 'start-dev' can sometimes be useful for development for faster restarts,
                    # but 'start' is what you want for more production-like behavior including optimizations.
    command: ["start", "--import-realm"]
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health/ready || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s # Increased start_period for Keycloak, it can be slow to init fully

  metabase:
    image: metabase/metabase:latest
    container_name: supermercado_metabase
    hostname: metabase
    restart: always
    volumes:
      - /dev/urandom:/dev/random:ro # For Metabase < v0.46. MB_JVM_OPTS="-Djava.security.egd=file:/dev/./urandom"
    ports:
      - "3001:3000"
    environment:
      MB_DB_TYPE: postgres
      MB_DB_DBNAME: metabase
      MB_DB_PORT: 5432
      MB_DB_USER: admin
      MB_DB_PASS: admin
      MB_DB_HOST: db
      # For Metabase >= v0.46, /dev/urandom mount isn't strictly needed, but this helps older versions.
      # MB_JVM_OPTS: "-Djava.security.egd=file:/dev/./urandom"
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl --fail -I http://localhost:3000/api/health || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 30s # Give metabase some time to start

  server:
    build: . # Assumes Dockerfile is in the root directory
    network_mode: host
    container_name: supermercado_server
    restart: always
    depends_on:
      db:
        condition: service_healthy
      #keycloak: # Add this if your server needs Keycloak to be up
      #  condition: service_healthy

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: supermercado_frontend
    ports:
      - "4200:4200"
    volumes:
      - ./frontend/src:/app/src
      # If node_modules issues arise due to OS differences with the container:
      # - ./frontend:/app
      # - /app/node_modules
    restart: always
    depends_on: # If frontend makes direct calls to server on startup
      - server
      # If frontend makes calls to Keycloak for config (e.g. keycloak.js init)
      # - keycloak:
      #    condition: service_healthy

volumes:
  pgdata: